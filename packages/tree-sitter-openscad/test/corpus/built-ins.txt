==================
Mathematical Functions
==================

result = sin(45);
result = cos(radians(45));
result = tan(30);
result = sqrt(16);
result = pow(2, 3);
result = abs(-5);

// Additional mathematical functions
acos_result = acos(0.5);
asin_result = asin(0.5);
atan_result = atan(1);
atan2_result = atan2(1, 1);
sign_positive = sign(5);
sign_negative = sign(-3);
sign_zero = sign(0);
natural_log = ln(2.718);
base10_log = log(100);
exponential = exp(1);

---

(source_file
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (number)))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (call_expression
                function: (identifier)
                arguments: (argument_list
                  (arguments
                    (argument
                      (number)))))))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (number)))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (number)))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (number))
            (argument
              (number)))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (unary_expression
                operand: (expression
                  (primary_expression
                    (number))))))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (number)))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (number)))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (number)))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (number))
            (argument
              (number)))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (number)))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (unary_expression
                operand: (expression
                  (primary_expression
                    (number))))))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (number)))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (number)))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (number)))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (number))))))))

==================
Min Max Functions
==================

minimum = min(1, 2, 3);
maximum = max([1, 2, 3]);
minimum_list = min([5, 2, 8, 1]);

---

(source_file
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (number))
            (argument
              (number))
            (argument
              (number)))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (vector_expression
                (number)
                (number)
                (number))))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (vector_expression
                (number)
                (number)
                (number)
                (number)))))))))

==================
String Functions
==================

text = str("Value: ", 42);
length = len("hello");
concatenated = concat("hello", " ", "world");
character = chr(65);
code = ord("A");

---

(source_file
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (string))
            (argument
              (number)))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (string)))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (string))
            (argument
              (string))
            (argument
              (string)))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (number)))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (string))))))))

==================
Vector and List Functions
==================

vector_len = norm([3, 4]);
cross_product = cross([1,0,0], [0,1,0]);
list_length = len([1, 2, 3]);
rounding = round(3.7);
ceiling = ceil(3.2);
flooring = floor(3.8);

---

(source_file
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (vector_expression
                (number)
                (number))))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (vector_expression
                (number)
                (number)
                (number)))
            (argument
              (vector_expression
                (number)
                (number)
                (number))))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (vector_expression
                (number)
                (number)
                (number))))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (number)))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (number)))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (number))))))))

==================
Echo Statements
==================

echo("Debug message");
echo("Value:", x, "Result:", y);
echo(str("Formatted: ", x));

---

(source_file
  (statement
    (echo_statement
      (arguments
        (argument
          (string)))))
  (statement
    (echo_statement
      (arguments
        (argument
          (string))
        (argument
          (identifier))
        (argument
          (string))
        (argument
          (identifier)))))
  (statement
    (echo_statement
      (arguments
        (argument
          (call_expression
            function: (identifier)
            arguments: (argument_list
              (arguments
                (argument
                  (string))
                (argument
                  (identifier))))))))))

==================
Assert Statements
==================

assert(x > 0, "x must be positive");
assert(len(points) == 3);
assert(is_num(value), str("Expected number, got: ", value));

---

(source_file
  (statement
    (assert_statement
      condition: (expression
        (binary_expression
          left: (expression
            (primary_expression
              (identifier)))
          right: (expression
            (primary_expression
              (number)))))
      message: (string)))
  (statement
    (assert_statement
      condition: (expression
        (binary_expression
          left: (expression
            (call_expression
              function: (expression
                (primary_expression
                  (identifier)))
              arguments: (argument_list
                (arguments
                  (argument
                    (identifier))))))
          right: (expression
            (primary_expression
              (number)))))))
  (statement
    (assert_statement
      condition: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (identifier)))))
      message: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (string))
            (argument
              (identifier))))))))

==================
Type Checking Functions
==================

is_number = is_num(42);
is_string = is_string("hello");
is_boolean = is_bool(true);
is_list = is_list([1, 2, 3]);
is_undefined = is_undef(undefined_var);
is_function_result = is_function(my_function);

---

(source_file
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (number)))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (string)))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (boolean)))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (vector_expression
                (number)
                (number)
                (number))))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (identifier)))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (identifier))))))))

==================
Random and Search Functions
==================

random_val = rands(0, 1, 5);
search_result = search("needle", ["hay", "needle", "stack"]);
lookup_result = lookup(2.5, [[0,0], [1,1], [2,4], [3,9]]);

---

(source_file
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (number))
            (argument
              (number))
            (argument
              (number)))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (string))
            (argument
              (vector_expression
                (string)
                (string)
                (string))))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (call_expression
        function: (identifier)
        arguments: (argument_list
          (arguments
            (argument
              (number))
            (argument
              (vector_expression
                (vector_expression
                  (number)
                  (number))
                (vector_expression
                  (number)
                  (number))
                (vector_expression
                  (number)
                  (number))
                (vector_expression
                  (number)
                  (number))))))))))
