==================
Simple Conditional Expression
==================

x = 5 > 3 ? "big" : "small";

---

(source_file
  (statement
    (assignment_statement
      name: (identifier)
      value: (conditional_expression
        condition: (binary_expression
          left: (number)
          operator: (greater_than_operator)
          right: (number))
        consequence: (string)
        alternative: (string)))))

==================
Simple For Loop
==================

for (i = [0:5]) cube(i);

---

(source_file
  (statement
    (for_statement
      iterator: (identifier)
      range: (range_expression
        start: (number)
        end: (number))
      (statement
        (module_instantiation
          name: (identifier)
          arguments: (argument_list
            (arguments
              (argument
                (identifier)))))))))

==================
For Loop with Step
==================

for (i = [0:2:10]) sphere(i);

---

(source_file
  (statement
    (for_statement
      iterator: (identifier)
      range: (range_expression
        start: (number)
        step: (number)
        end: (number))
      (statement
        (module_instantiation
          name: (identifier)
          arguments: (argument_list
            (arguments
              (argument
                (identifier)))))))))

==================
For Loop with Array
==================

for (i = [1, 3, 5, 7]) translate([i, 0, 0]) cube(1);

---

(source_file
  (statement
    (for_statement
      iterator: (identifier)
      range: (vector_expression
        (number)
        (number)
        (number)
        (number))
      (statement
        (module_instantiation
          name: (identifier)
          arguments: (argument_list
            (arguments
              (argument
                (vector_expression
                  (identifier)
                  (number)
                  (number)))))
          (statement
            (module_instantiation
              name: (identifier)
              arguments: (argument_list
                (arguments
                  (argument
                    (number)))))))))))

==================
Simple If Statement
==================

if (x > 5) cube(10);

---

(source_file
  (statement
    (if_statement
      condition: (binary_expression
        left: (identifier)
        operator: (greater_than_operator)
        right: (number))
      consequence: (statement
        (module_instantiation
          name: (identifier)
          arguments: (argument_list
            (arguments
              (argument
                (number)))))))))

==================
If-Else Statement
==================

if (x > 5) {
    cube(10);
} else {
    sphere(5);
}

---

(source_file
  (statement
    (if_statement
      condition: (binary_expression
        left: (identifier)
        operator: (greater_than_operator)
        right: (number))
      consequence: (block
        (statement
          (module_instantiation
            name: (identifier)
            arguments: (argument_list
              (arguments
                (argument
                  (number)))))))
      alternative: (block
        (statement
          (module_instantiation
            name: (identifier)
            arguments: (argument_list
              (arguments
                (argument
                  (number))))))))))

==================
Simple List Comprehension
==================

values = [for (i = [1:5]) i * 2];

---

(source_file
  (statement
    (assignment_statement
      name: (identifier)
      value: (list_comprehension
        (list_comprehension_for
          iterator: (identifier)
          range: (vector_expression
            (range_expression
              start: (number)
              end: (number))))
        expr: (binary_expression
          left: (identifier)
          operator: (multiplication_operator)
          right: (number))))))

==================
List Comprehension with Condition
==================

evens = [for (i = [1:10]) if (i % 2 == 0) i];

---

(source_file
  (statement
    (assignment_statement
      name: (identifier)
      value: (list_comprehension
        (list_comprehension_for
          iterator: (identifier)
          range: (vector_expression
            (range_expression
              start: (number)
              end: (number))))
        condition: (binary_expression
          left: (binary_expression
            left: (identifier)
            operator: (modulo_operator)
            right: (number))
          operator: (equality_operator)
          right: (number))
        expr: (identifier)))))

==================
Simple Let Expression
==================

result = let(x = 5, y = 10) x + y;

---

(source_file
  (statement
    (assignment_statement
      name: (identifier)
      value: (let_expression
        (let_assignment
          name: (identifier)
          value: (number))
        (let_assignment
          name: (identifier)
          value: (number))
        body: (binary_expression
          left: (identifier)
          operator: (addition_operator)
          right: (identifier))))))

==================
Special Variables
==================

$fn = 36;
$fa = 12;
$fs = 2;

---

(source_file
  (statement
    (assignment_statement
      name: (special_variable)
      value: (number)))
  (statement
    (assignment_statement
      name: (special_variable)
      value: (number)))
  (statement
    (assignment_statement
      name: (special_variable)
      value: (number))))

==================
Modifier Characters
==================

#cube(10);
!sphere(5);
%cylinder(h=5, r=2);
*translate([10,0,0]) cube(5);

---

(source_file
  (statement
    (module_instantiation
      (modifier)
      name: (identifier)
      arguments: (argument_list
        (arguments
          (argument
            (number))))))
  (statement
    (module_instantiation
      (modifier)
      name: (identifier)
      arguments: (argument_list
        (arguments
          (argument
            (number))))))
  (statement
    (module_instantiation
      (modifier)
      name: (identifier)
      arguments: (argument_list
        (arguments
          (argument
            name: (identifier)
            value: (number))
          (argument
            name: (identifier)
            value: (number))))))
  (statement
    (module_instantiation
      (modifier)
      name: (identifier)
      arguments: (argument_list
        (arguments
          (argument
            (vector_expression
              (number)
              (number)
              (number)))))
      (statement
        (module_instantiation
          name: (identifier)
          arguments: (argument_list
            (arguments
              (argument
                (number)))))))))

==================
Array Indexing
==================

arr = [1, 2, 3];
x = arr[0];
y = arr[1];

---

(source_file
  (statement
    (assignment_statement
      name: (identifier)
      value: (vector_expression
        (number)
        (number)
        (number))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (index_expression
        array: (identifier)
        index: (number))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (index_expression
        array: (identifier)
        index: (number)))))

==================
Member Access
==================

point = [10, 20, 30];
x = point.x;
y = point.y;
z = point.z;

---

(source_file
  (statement
    (assignment_statement
      name: (identifier)
      value: (vector_expression
        (number)
        (number)
        (number))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (member_expression
        object: (identifier)
        property: (identifier))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (member_expression
        object: (identifier)
        property: (identifier))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (member_expression
        object: (identifier)
        property: (identifier)))))
