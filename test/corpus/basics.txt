==================
Basic Expressions
==================

1 + 2 * 3;
true || false;
"hello" == "world";

---

(source_file
  (statement
    (expression
      (binary_expression
        left: (expression (number))
        operator: (operator)
        right: (expression
          (binary_expression
            left: (expression (number))
            operator: (operator)
            right: (expression (number)))))))
  (statement
    (expression
      (binary_expression
        left: (expression (boolean))
        operator: (operator)
        right: (expression (boolean)))))
  (statement
    (expression
      (binary_expression
        left: (expression (string))
        operator: (operator)
        right: (expression (string))))))

==================
Module Definition
==================

module cube_wrap(size = 10) {
    cube(size);
}

---

(source_file
  (statement
    (module_definition
      name: (identifier)
      parameters: (parameter_list
        (parameter_declarations
          (parameter_declaration
            (identifier)
            (expression (number)))))
      body: (block
        (statement
          (module_instantiation
            name: (identifier)
            arguments: (argument_list
              (arguments
                (argument (expression (identifier))))))))))

==================
Function Definition
==================

function add(a, b) = a + b;

---

(source_file
  (statement
    (function_definition
      name: (identifier)
      parameters: (parameter_list
        (parameter_declarations
          (parameter_declaration (identifier))
          (parameter_declaration (identifier))))
      value: (expression
        (binary_expression
          left: (expression (identifier))
          operator: (operator)
          right: (expression (identifier)))))))

==================
Include and Use
==================

include <shapes.scad>;
use <utils.scad>;

---

(source_file
  (statement
    (include_statement (string)))
  (statement
    (use_statement (string))))

==================
Variables and Assignment
==================

r = 10;
h = 20;
volume = 3.14 * r * r * h;

---

(source_file
  (statement
    (assignment_statement
      name: (identifier)
      value: (expression (number))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (expression (number))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (expression
        (binary_expression
          left: (expression (number))
          operator: (operator)
          right: (expression
            (binary_expression
              left: (expression (identifier))
              operator: (operator)
              right: (expression
                (binary_expression
                  left: (expression (identifier))
                  operator: (operator)
                  right: (expression (identifier)))))))))))

==================
Module Instantiation
==================

translate([10, 0, 0]) {
    cube(5);
}

#sphere(r=5);

---

(source_file
  (statement
    (module_instantiation
      name: (identifier)
      arguments: (argument_list
        (arguments
          (argument
            (expression (vector_expression (expression (number)) (expression (number)) (expression (number)))))))
      body: (block
        (statement
          (module_instantiation
            name: (identifier)
            arguments: (argument_list
              (arguments
                (argument (expression (number)))))
            ";")))))
  (statement
    (module_instantiation
      modifier: (modifier)
      name: (identifier)
      arguments: (argument_list
        (arguments
          (argument
            (identifier)
            (expression (number)))))
      ";")))

==================
Conditional and Let
==================

x = 5;
result = x > 10 ? "big" : "small";

shape = let(
    width = 10,
    height = 20
) cube([width, height, 1]);

---

(source_file
  (statement
    (assignment_statement
      name: (identifier)
      value: (expression (number))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (expression
        (conditional_expression
          condition: (expression
            (binary_expression
              left: (expression (identifier))
              operator: (operator)
              right: (expression (number))))
          consequence: (expression (string))
          alternative: (expression (string))))))
  (statement
    (assignment_statement
      name: (identifier)
      value: (expression
        (let_expression
          (let_clause
            (identifier)
            (expression (number)))
          (let_clause
            (identifier)
            (expression (number)))
          (expression
            (call_expression
              function: (identifier)
              arguments: (argument_list
                (arguments
                  (argument
                    (expression
                      (vector_expression
                        (expression (identifier))
                        (expression (identifier))
                        (expression (number)))))))))))))))) 